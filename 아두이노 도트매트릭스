#include <FrequencyTimer2.h>
#define SESOR A0
#define A { \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0} \
} 
#define B { \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0} \
} 
#define C { \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 0, 0, 0, 0, 0, 0} \
} 
#define D { \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0} \
} 
#define E { \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0}, \
    {1, 1, 1, 1, 0, 0, 0, 0} \
} 
#define F { \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0}, \
    {1, 1, 1, 1, 1, 0, 0, 0} \
} 
#define G { \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0}, \
    {1, 1, 1, 1, 1, 1, 0, 0} \
} 
#define H { \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0}, \
    {1, 1, 1, 1, 1, 1, 1, 0} \
} 
#define I { \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1}, \
    {1, 1, 1, 1, 1, 1, 1, 1} \
} 

byte col = 0;       // COL을 0으로 초기화
byte leds[8][8];    // 현재 출력해야 할 LED 모양 업로드 하는 배열

// 맨 처음 PINS[0]은 사용하지 않기 때문에 -1로 설정. 1~16번까지의 핀을 PIN에 연결
int pins[17]= {-1, 5, 4, 3, 2, 14, 15, 16, 17, 13, 12, 11, 10, 9, 8, 7, 6};

// 열 0~7번까지 핀 연결해 주기
int cols[8] = {pins[13], pins[3], pins[4], pins[10], pins[6], pins[11], pins[15], pins[16]};

// 행 0~ 7번까지 핀 연결해 주기
int rows[8] = {pins[9], pins[14], pins[8], pins[12], pins[1], pins[7], pins[2], pins[5]};

const int numPatterns = 9;      // 총 사용할 패턴 수
byte patterns[numPatterns][8][8] = { A, B, C, D, E, F, G, H, I };   // 위에서 정의한 led 모양을 patterns에 입력

void setup() {
  int i;
  Serial.begin(9600);
  
  // 1~16번까지의 핀을 출력으로 설정
  for (i = 1; i <= 16; i++) {
    pinMode(pins[i], OUTPUT);
  }

  clearLeds();   // led 초기화
  
  FrequencyTimer2::setOnOverflow(display);
  // leds 출력을 위한 setOnOverflow 함수 (interrupt 함수)
  // display함수가 interrupt routine이 됨

  setPattern(pattern); // 초기 출력 패턴 지정
  
}

void loop() {
int val = analogRead(SESOR);
// 최소값은 1로 하고 최대값은 100으로 잡는다
if (val < 11)
  setPattern(0);
else if (val < 22)
  setPattern(1);
else if (val < 33)
  setPattern(2);
else if (val < 44)
  setPattern(3);
else if (val < 55)
  setPattern(4);
else if (val < 66)
  setPattern(5);
else if (val < 77)
  setPattern(6);
else if (val < 88)
  setPattern(7);
else if (val < 99)
  setPattern(8);
delay(100);
}


void clearLeds() {  // led 모두 0으로 초기화
  for (int i = 0; i < 8; i++) 
    for (int j = 0; j < 8; j++) 
      leds[i][j] = 0;
}



void setPattern(int pattern) {        // LED 배열에 PATTERN 입력하기
for (int i = 0; i < 8; i++) 
    for (int j = 0; j < 8; j++) 
      leds[i][j] = patterns[pattern][i][j];   
}



######################################

void display() {
  
  digitalWrite(cols[col], HIGH);  // 이전 열의 LED 모두 OFF

  // 다음 표시할 열 인덱스 지정
  col = ++col % 8;


  // leds 배열 값이 1인 위치 LED ON
  // rows는 HIGH, cols는 LOW이면 LED ON
  
  for (int row = 0; row < 8; row++) {
    if (leds[row][col] == 1) {
      digitalWrite(rows[row], HIGH);
    }
    else {
      digitalWrite(rows[row], LOW);
    }
  }
  digitalWrite(cols[col], LOW);
}

#########################################
