#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STACK_SIZE 1000
#pragma warning (disable:4996)

typedef struct {
	short int row;
	short int col;
	short int dir;
} element;
element stack[MAX_STACK_SIZE];

typedef struct {
	short int vert;
	short int horiz;
} offsets;
offsets move[4]; //방향은 4개


/*
 (1) stack[MAX_SIZE]: row, col, direction
– 방문한 지점을 저장하되, direction은 다음 방문위치를 나타냄.
 (2) maze[ROW][COL]: – 미로 구성(1, 0): 0 통과 가능, 1은 blocked.
 (3) mark[ROW][COL]: – 해당 지점 과거 방문여부 표시
 */

/*
• 변수 row, col: 현재 좌표, dir: 현재 진행방향
• 변수 next_row, next_col: 현재 지점 대비 다음 진행할
좌표*/

element pop();
void push(element item);
void path(void);
void printf_maze(void);

int maze[20][20];
int mark[20][20];

int s_row, s_col;
int f_row, f_col;
int top = 0;
int n_row, n_col;

int main(void)
{
	move[0].vert = -1; move[0].horiz = 0;
	move[1].vert = 0; move[1].horiz = 1;
	move[2].vert = 1; move[2].horiz = 0;
	move[3].vert = 0; move[3].horiz = -1;	

	
	FILE* maze1 = fopen("maze1.txt", "r");
	if (!maze1)
	{
		puts("파일을 열 수 없습니다.");
		exit(1);
	}
	fscanf(maze1, "%d %d", &n_row, &n_col);

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			if (i == 0)
				maze[i][j] = 1;
			else if (i == n_row + 1)
				maze[i][j] = 1;
			else if (j == 0)
				maze[i][j] = 1;
			else if (j == n_col + 1)
				maze[i][j] = 1;
			else
				fscanf(maze1, "%d ", &maze[i][j]);
		}
	}

	fscanf(maze1, "%d %d %d %d ", &s_row, &s_col, &f_row, &f_col);

	printf_maze();

	path();

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			mark[i][j] = 0;
		}
	}
	

	fclose(maze1);

	// 두번째 미로
	
	FILE* maze2 = fopen("maze2.txt", "r");
	if (!maze2)
	{
		puts("파일을 열 수 없습니다.");
		exit(1);
	}
	fscanf(maze2, "%d %d", &n_row, &n_col);

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			if (i == 0)
				maze[i][j] = 1;
			else if (i == n_row + 1)
				maze[i][j] = 1;
			else if (j == 0)
				maze[i][j] = 1;
			else if (j == n_col + 1)
				maze[i][j] = 1;
			else
				fscanf(maze2, "%d ", &maze[i][j]);
		}
	}

	fscanf(maze2, "%d %d %d %d ", &s_row, &s_col, &f_row, &f_col);

	printf_maze();

	path();

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			mark[i][j] = 0;
		}
	}
	fclose(maze2);

	// 3번째 미로

	FILE* maze3 = fopen("maze3.txt", "r");
	if (!maze3)
	{
		puts("파일을 열 수 없습니다.");
		exit(1);
	}
	fscanf(maze3, "%d %d", &n_row, &n_col);

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			if (i == 0)
				maze[i][j] = 1;
			else if (i == n_row + 1)
				maze[i][j] = 1;
			else if (j == 0)
				maze[i][j] = 1;
			else if (j == n_col + 1)
				maze[i][j] = 1;
			else
				fscanf(maze3, "%d ", &maze[i][j]);
		}
	}

	fscanf(maze3, "%d %d %d %d ", &s_row, &s_col, &f_row, &f_col);

	printf_maze();

	path();
	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			mark[i][j] = 0;
		}
	}
	fclose(maze3);

	// 4번째 미로

	FILE* maze4 = fopen("maze4.txt", "r");
	if (!maze4)
	{
		puts("파일을 열 수 없습니다.");
		exit(1);
	}
	fscanf(maze4, "%d %d", &n_row, &n_col);

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			if (i == 0)
				maze[i][j] = 1;
			else if (i == n_row + 1)
				maze[i][j] = 1;
			else if (j == 0)
				maze[i][j] = 1;
			else if (j == n_col + 1)
				maze[i][j] = 1;
			else
				fscanf(maze4, "%d ", &maze[i][j]);
		}
	}

	fscanf(maze4, "%d %d %d %d ", &s_row, &s_col, &f_row, &f_col);

	printf_maze();
	
	path();

	for (int i = 0; i < n_row + 2; i++) {
		for (int j = 0; j < n_col + 2; j++) {
			mark[i][j] = 0;
		}
	}

	fclose(maze4);
}
void printf_maze(void)
{
	printf("MAZE\n");
	for (int i = 1; i < n_row + 1; i++) {
		for (int j = 1; j < n_col + 1; j++) {
			printf(" %d", maze[i][j]);
		}
		puts(" ");
	}
	printf("\n");
}
element pop() 
{
	return stack[top--];
}

void push(element item)
{
	stack[++top] = item;
}


void path(void)
{
	int row, col;
	int next_row = 0;
	int next_col = 0; 
	int dir, found = 0;
	element position;

	mark[s_row + 1][s_col + 1] = 1;
	top = 0;
	stack[0].row = s_row + 1; 
	stack[0].col = s_col + 1; 
	stack[0].dir = 0;
	while (top > -1 && !found) {
		position = pop();
		row = position.row;
		col = position.col;
		dir = position.dir;
		while (dir < 4 && !found) {
			// move in direction dir
			next_row = row + move[dir].vert;
			next_col = col + move[dir].horiz;
			if (next_row == f_row + 1 && next_col == f_col + 1) {
				found = 1;
				position.row = row; position.col = col;
				position.dir = dir++;
				push(position);
			}
			else if (!maze[next_row][next_col] && !mark[next_row][next_col]) {
				//printf("%d %d\n", maze[next_row][next_col], mark[next_row][next_col]);
				mark[next_row][next_col] = 1;
				position.row = row; position.col = col;
				position.dir = ++dir;
				push(position);
				row = next_row; col = next_col;
				dir = 0;
			}
			else ++dir;
		}
		//position.row = next_row;
		//position.col = next_col;
		//position.dir = 0;
		//push(position);
	}

	int a, b;
	if (top == -1)
		printf("No path!\n");
	for (int j = 0; j <= top; j++) {
		if (j == top)
			printf("The path is:\n");
		a = stack[j].row;
		b = stack[j].col;
		//if (a != f_row + 1 && b != f_col + 1)
 		maze[a][b] = 2;
	}
	//printf("%d %d %d %d\n", s_row, s_col, f_row, f_col);
	//printf("%d %d\n", n_row, n_col);
	for (int j = 1; j < n_row + 1; j++) {
		for (int k = 1; k < n_col + 1; k++) {
			if (j == s_row + 1 && k == s_col + 1)
				printf(" S", maze[j][k]);
			else if (j == f_row + 1 && k == f_col + 1)
				printf(" F", maze[j][k]);
			else if (maze[j][k] == 2)
				printf(" X");
			else 
				printf(" %d", maze[j][k]);
		}
		printf("\n");
	}
	printf("\n\n\n");
}
